.SUFFIXES:	.ino .hex .eep .elf .a

# Defined in the Makefile:
#
# ARDUINO_VER=	1.0.6
# ARDUINO_VER=	1.6.1
#
# ARDUINO_MODEL= Uno
# ARDUINO_MODEL= Mega2560
#

ARDUINO_DIR=/usr/local/arduino-${ARDUINO_VER}
.if ${ARDUINO_VER} == "1.0.6"
ARDUINO_DEF=106
ARDUINO_HARDWARE_DIR=${ARDUINO_DIR}/hardware/arduino/
.elif ${ARDUINO_VER} == "1.6.1"
ARDUINO_DEF=10600
ARDUINO_HARDWARE_DIR=${ARDUINO_DIR}/hardware/arduino/avr/
.else
. error ARDUINO_VER should be 1.0.6 or 1.6.1
.endif
BUILDDIR=./build/${TARGET}
EMULATORDIR=../emulator

# Arduino Mega256
.if ${ARDUINO_MODEL} == "Mega2560"
PARTNO=		atmega2560
PROTO=		wiring
MCU=		atmega2560
CFLAGS_ARDUINO=	-DARDUINO_AVR_MEGA2560 -DARDUINO_ARCH_AVR -DARDUINO=${ARDUINO_DEF}
.elif ${ARDUINO_MODEL} == "Uno"
# Arduino UNO
PARTNO=		atmega328p
PROTO=		arduino
MCU=		atmega328p
CFLAGS_ARDUINO=	-DARDUINO=${ARDUINO_DEF} 
.else
. error ARDUINO_MODEL should be Mega2560 or Uni
.endif

COMPORT=	/dev/cuaU0
COMSPEED=	115200

AVRLIBC_FILES=
.if ${ARDUINO_VER} == "1.0.6"
AVRLIBC_FILES+=			\
	realloc.c		\
	malloc.c
.endif

BASE_C_FILES=			\
	WInterrupts.c		\
	wiring.c		\
	wiring_analog.c		\
	wiring_digital.c	\
	wiring_pulse.c		\
	wiring_shift.c
.if ${ARDUINO_VER} == "1.6.1"
BASE_C_FILES+=			\
	hooks.c
.endif

BASE_CXX_FILES=			\
	CDC.cpp			\
	HID.cpp			\
	HardwareSerial.cpp	\
	IPAddress.cpp		\
	Print.cpp		\
	Stream.cpp		\
	Tone.cpp		\
	USBCore.cpp		\
	new.cpp			\
	WMath.cpp		\
	WString.cpp		\
	main.cpp

.if ${ARDUINO_VER} == "1.6.1"
BASE_CXX_FILES+=		\
	abi.cpp			\
	HardwareSerial3.cpp	\
	HardwareSerial2.cpp	\
	HardwareSerial1.cpp	\
	HardwareSerial0.cpp
.endif

EMULATOR_FILES=			\
	Adafruit_NeoPixel.cpp	\
	Arduino.cpp		\
	ArduinoMain.cpp		\
	MemoryFree.cpp		\
	Serial.cpp

O_FILES=				\
	${AVRLIBC_FILES:S/^/${BUILDDIR}\//:S/.c$/.o/}	\
	${BASE_C_FILES:S/^/${BUILDDIR}\//:S/.c$/.o/}	\
	${BASE_CXX_FILES:S/^/${BUILDDIR}\//:S/.cpp$/.o/}
.for f in ${INO_FILES}
O_FILES+= \
	${f:S/^/${BUILDDIR}\//:S/.ino/.o/}
.endfor
.for f in ${SRC_FILES}
O_FILES+= \
	${SRC_FILES:S/^/${BUILDDIR}\//:S/.cpp$/.o/}
.endfor
.for f in ${SRC_FILES}
O_FILES+= \
	${MODULES:S/^/${BUILDDIR}\//:S/$/.o/}
.endfor

.if defined(TARGET)
. if ${TARGET} == "arduino"

#
# Arduino related targets
#
CC=${ARDUINO_DIR}/hardware/tools/avr/bin/avr-gcc
CXX=${ARDUINO_DIR}/hardware/tools/avr/bin/avr-g++
AR=${ARDUINO_DIR}/hardware/tools/avr/bin/avr-ar
CC=avr-gcc-4.8.3
CXX=avr-g++
AR=avr-gcc-ar

CFLAGS= \
	-c -Os -Wall -Wno-char-subscripts \
	-fno-exceptions -ffunction-sections -fdata-sections \
	-fno-threadsafe-statics \
	-mmcu=${MCU} -DF_CPU=16000000L -MMD \
	${CFLAGS_ARDUINO}
.if ${ARDUINO_MODEL} == "Uno"
CFLAGS+= \
	-I${ARDUINO_HARDWARE_DIR}/variants/standard \
	-I${ARDUINO_HARDWARE_DIR}/cores/arduino
.endif
.if ${ARDUINO_MODEL} == "Mega2560"
CFLAGS+= \
	-I${ARDUINO_HARDWARE_DIR}/cores/arduino \
	-I${ARDUINO_HARDWARE_DIR}/variants/mega
.endif
.if ${ARDUINO_VER} == "1.0.6"
CFLAGS+= \
	-DUSB_VID=null -DUSB_PID=null
.endif
.for M in ${MODULES}
CFLAGS+= -I${SKETCHBOOK_DIR}/libraries/${M}
.endfor

CXXFLAGS=	${CFLAGS}

all_arduino: ${BUILDDIR} ${BUILDDIR}/${PROJECT}.hex ${BUILDDIR}/${PROJECT}.eep 
	avrdude \
	    -D -F -V -v -p ${PARTNO} -c ${PROTO} \
	    -P ${COMPORT} -b ${COMSPEED} -Uflash:w:${BUILDDIR}/${PROJECT}.hex:i
	${MAKE} size_arduino
	sleep 2
	cu -l ${COMPORT} -s 9600

size_arduino: ${BUILDDIR} ${BUILDDIR}/${PROJECT}.elf
	avr-size ${BUILDDIR}/${PROJECT}.elf

.c.o:
	${CC} ${CFLAGS} -Werror -o ${.TARGET} -c ${.ALLSRC}
.cpp.o:
	${CXX} ${CXXFLAGS} -Werror -x c++ -o ${.TARGET} -c ${.ALLSRC}
.ino.o:
	${CXX} ${CXXFLAGS} -Werror -x c++ -o ${.TARGET} -c ${.ALLSRC}

.for M in ${AVRLIBC_FILES}
${M:S/^/${BUILDDIR}\//:S/.c$/.o/}: ${ARDUINO_HARDWARE_DIR}/cores/arduino/avr-libc/${M}
	${CC} ${CFLAGS} -o ${.TARGET} -c ${.ALLSRC}
.endfor
.for M in ${BASE_C_FILES}
${M:S/^/${BUILDDIR}\//:S/.c$/.o/}: ${ARDUINO_HARDWARE_DIR}/cores/arduino/${M}
	${CC} ${CFLAGS} -o ${.TARGET} -c ${.ALLSRC}
.endfor
.for M in ${BASE_CXX_FILES}
${M:S/^/${BUILDDIR}\//:S/.cpp$/.o/}: ${ARDUINO_HARDWARE_DIR}/cores/arduino/${M}
	${CXX} ${CXXFLAGS} -x c++ -o ${.TARGET} -c ${.ALLSRC}
.endfor

.for M in ${MODULES}
${M:S/^/${BUILDDIR}\//:S/.cpp$//}.o: ${SKETCHBOOK_DIR}/libraries/${M}/${M}.cpp
	${CXX} ${CXXFLAGS} -x c++ -o ${.TARGET} -c ${.ALLSRC}
.endfor

.for M in ${SRC_FILES}
${M:S/^/${BUILDDIR}\//:S/.cpp$//}.o: ${M}
	${CXX} ${CXXFLAGS} -Werror -x c++ -o ${.TARGET} -c ${.ALLSRC}
.endfor

.for M in ${INO_FILES}
${M:S/^/${BUILDDIR}\//:S/.ino$//}.o: ${M}
	${CXX} ${CXXFLAGS} -Werror -x c++ -o ${.TARGET} -c ${.ALLSRC}
.endfor

core.a: ${O_FILES}
	${AR} rcs ${.TARGET} ${.ALLSRC} ${O_FILES}

${BUILDDIR}/${PROJECT}.elf: core.a
	${CC} -Os -Wl,--gc-sections,--relax -mmcu=${MCU} -o ${.TARGET} ${.ALLSRC} -lm

${BUILDDIR}/${PROJECT}.eep: ${BUILDDIR}/${PROJECT}.elf
	${ARDUINO_DIR}/hardware/tools/avr/bin/avr-objcopy \
	    -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load \
	    --no-change-warnings --change-section-lma .eeprom=0 \
	    ${.ALLSRC} ${.TARGET}

#.elf.hex:
${BUILDDIR}/${PROJECT}.hex: ${BUILDDIR}/${PROJECT}.elf
	${ARDUINO_DIR}/hardware/tools/avr/bin/avr-objcopy \
	    -O ihex -R .eeprom ${.ALLSRC} ${.TARGET}

. endif

#
# FreeBSD related targets
#
. if ${TARGET} == "freebsd"

LDFLAGS= -lcurses
CFLAGS= \
	-c -g -Os -Wall -Werror -Wno-char-subscripts \
	-I${EMULATORDIR} -I.
.for M in ${MODULES}
CFLAGS+= -I${SKETCHBOOK_DIR}/libraries/${M}
.endfor

.for M in ${EMULATOR_FILES}
${M:S/^/${BUILDDIR}\//:S/.cpp$//}.o: ${EMULATORDIR}/${M}
	${CXX} ${CXXFLAGS} -x c++ -o ${.TARGET} -c ${.ALLSRC}
.endfor

.for M in ${SRC_FILES}
${M:S/^/${BUILDDIR}\//:S/.cpp$//}.o: ${M}
	${CXX} ${CXXFLAGS} -x c++ -o ${.TARGET} -c ${.ALLSRC}
.endfor

.for M in ${INO_FILES}
${M:S/^/${BUILDDIR}\//:S/.ino$//}.o: ${M}
	${CXX} ${CXXFLAGS} -x c++ -o ${.TARGET} -c ${.ALLSRC}
.endfor

${BUILDDIR}/${PROJECT}: ${EMULATOR_FILES:S/^/${BUILDDIR}\//:S/.cpp$/.o/} ${SRC_FILES:S/^/${BUILDDIR}\//:S/.cpp$/.o/} ${INO_FILES:S/^/${BUILDDIR}\//:S/.ino$/.o/}
	${CXX} ${LDFLAGS} -o ${.TARGET} ${.ALLSRC}


all_freebsd: ${BUILDDIR} ${BUILDDIR}/${PROJECT}
	${BUILDDIR}/ledsquare
. endif
.endif


#
# For every target
#
.for option in ${OPTIONS}
CFLAGS+= -D${option}
.endfor

${BUILDDIR}:
	mkdir -p ${BUILDDIR}

clean:
	rm -rf build core.a

depends:
	${CC} ${CXXFLAGS} -x c++ -M *.ino *.cpp > .depend

size: 
	OPTIONS="${OPTIONS}" TARGET=arduino ${MAKE} size_arduino

upload: 
	OPTIONS="${OPTIONS}" TARGET=arduino ${MAKE} all_arduino

test:
	OPTIONS="${OPTIONS}" TARGET=freebsd ${MAKE} all_freebsd

testing:
	OPTIONS="TESTING ${OPTIONS}" TARGET=freebsd ${MAKE} all_freebsd
